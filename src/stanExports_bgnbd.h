// Generated by rstantools.  Do not edit by hand.

/*
    bytd is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    bytd is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with bytd.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_bgnbd_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 105> locations_array__ =
  {" (found before start of program)",
  " (in 'bgnbd', line 77, column 2 to column 18)",
  " (in 'bgnbd', line 78, column 2 to column 22)",
  " (in 'bgnbd', line 79, column 2 to column 18)",
  " (in 'bgnbd', line 80, column 2 to column 18)",
  " (in 'bgnbd', line 81, column 2 to column 50)",
  " (in 'bgnbd', line 82, column 2 to column 51)",
  " (in 'bgnbd', line 110, column 2 to column 42)",
  " (in 'bgnbd', line 120, column 8 to column 81)",
  " (in 'bgnbd', line 119, column 26 to line 121, column 6)",
  " (in 'bgnbd', line 119, column 12 to line 121, column 6)",
  " (in 'bgnbd', line 118, column 8 to column 78)",
  " (in 'bgnbd', line 117, column 26 to line 119, column 7)",
  " (in 'bgnbd', line 117, column 12 to line 121, column 6)",
  " (in 'bgnbd', line 116, column 8 to column 81)",
  " (in 'bgnbd', line 115, column 26 to line 117, column 7)",
  " (in 'bgnbd', line 115, column 12 to line 121, column 6)",
  " (in 'bgnbd', line 114, column 8 to column 78)",
  " (in 'bgnbd', line 113, column 20 to line 115, column 7)",
  " (in 'bgnbd', line 113, column 6 to line 121, column 6)",
  " (in 'bgnbd', line 112, column 19 to line 122, column 4)",
  " (in 'bgnbd', line 112, column 4 to line 122, column 4)",
  " (in 'bgnbd', line 111, column 22 to line 123, column 2)",
  " (in 'bgnbd', line 111, column 2 to line 123, column 2)",
  " (in 'bgnbd', line 86, column 6 to column 38)",
  " (in 'bgnbd', line 87, column 6 to column 50)",
  " (in 'bgnbd', line 88, column 6 to column 38)",
  " (in 'bgnbd', line 89, column 6 to column 38)",
  " (in 'bgnbd', line 85, column 34 to line 90, column 3)",
  " (in 'bgnbd', line 85, column 2 to line 90, column 3)",
  " (in 'bgnbd', line 92, column 4 to column 29)",
  " (in 'bgnbd', line 91, column 17 to line 93, column 3)",
  " (in 'bgnbd', line 91, column 2 to line 93, column 3)",
  " (in 'bgnbd', line 95, column 4 to column 19)",
  " (in 'bgnbd', line 94, column 15 to line 96, column 3)",
  " (in 'bgnbd', line 94, column 2 to line 96, column 3)",
  " (in 'bgnbd', line 105, column 10 to column 80)",
  " (in 'bgnbd', line 104, column 28 to line 106, column 9)",
  " (in 'bgnbd', line 104, column 14 to line 106, column 9)",
  " (in 'bgnbd', line 103, column 10 to column 77)",
  " (in 'bgnbd', line 102, column 28 to line 104, column 9)",
  " (in 'bgnbd', line 102, column 14 to line 106, column 9)",
  " (in 'bgnbd', line 101, column 10 to column 80)",
  " (in 'bgnbd', line 100, column 28 to line 102, column 9)",
  " (in 'bgnbd', line 100, column 14 to line 106, column 9)",
  " (in 'bgnbd', line 99, column 10 to column 77)",
  " (in 'bgnbd', line 98, column 22 to line 100, column 9)",
  " (in 'bgnbd', line 98, column 8 to line 106, column 9)",
  " (in 'bgnbd', line 97, column 18 to line 107, column 3)",
  " (in 'bgnbd', line 97, column 4 to line 107, column 3)",
  " (in 'bgnbd', line 53, column 2 to column 19)",
  " (in 'bgnbd', line 54, column 2 to column 11)",
  " (in 'bgnbd', line 55, column 2 to column 15)",
  " (in 'bgnbd', line 56, column 2 to column 17)",
  " (in 'bgnbd', line 57, column 2 to column 34)",
  " (in 'bgnbd', line 58, column 2 to column 30)",
  " (in 'bgnbd', line 59, column 2 to column 30)",
  " (in 'bgnbd', line 60, column 2 to column 30)",
  " (in 'bgnbd', line 61, column 20 to column 21)",
  " (in 'bgnbd', line 61, column 2 to column 25)",
  " (in 'bgnbd', line 62, column 20 to column 21)",
  " (in 'bgnbd', line 62, column 2 to column 25)",
  " (in 'bgnbd', line 63, column 20 to column 21)",
  " (in 'bgnbd', line 63, column 2 to column 25)",
  " (in 'bgnbd', line 64, column 20 to column 21)",
  " (in 'bgnbd', line 64, column 2 to column 29)",
  " (in 'bgnbd', line 67, column 2 to column 21)",
  " (in 'bgnbd', line 68, column 2 to column 19)",
  " (in 'bgnbd', line 70, column 4 to column 19)",
  " (in 'bgnbd', line 69, column 29 to line 71, column 3)",
  " (in 'bgnbd', line 69, column 2 to line 71, column 3)",
  " (in 'bgnbd', line 73, column 4 to column 17)",
  " (in 'bgnbd', line 72, column 29 to line 74, column 3)",
  " (in 'bgnbd', line 72, column 2 to line 74, column 3)",
  " (in 'bgnbd', line 81, column 18 to column 41)",
  " (in 'bgnbd', line 82, column 26 to column 47)",
  " (in 'bgnbd', line 110, column 9 to column 32)",
  " (in 'bgnbd', line 5, column 4 to column 19)",
  " (in 'bgnbd', line 6, column 4 to column 19)",
  " (in 'bgnbd', line 7, column 4 to column 18)",
  " (in 'bgnbd', line 8, column 4 to column 18)",
  " (in 'bgnbd', line 10, column 4 to column 72)",
  " (in 'bgnbd', line 11, column 4 to column 33)",
  " (in 'bgnbd', line 12, column 4 to column 24)",
  " (in 'bgnbd', line 14, column 4 to column 79)",
  " (in 'bgnbd', line 16, column 4 to column 33)",
  " (in 'bgnbd', line 4, column 74 to line 17, column 3)",
  " (in 'bgnbd', line 20, column 4 to column 12)",
  " (in 'bgnbd', line 21, column 4 to column 12)",
  " (in 'bgnbd', line 23, column 4 to column 69)",
  " (in 'bgnbd', line 25, column 4 to column 101)",
  " (in 'bgnbd', line 27, column 4 to column 19)",
  " (in 'bgnbd', line 19, column 92 to line 28, column 1)",
  " (in 'bgnbd', line 31, column 4 to column 12)",
  " (in 'bgnbd', line 32, column 4 to column 12)",
  " (in 'bgnbd', line 34, column 4 to column 44)",
  " (in 'bgnbd', line 36, column 4 to column 90)",
  " (in 'bgnbd', line 38, column 4 to column 19)",
  " (in 'bgnbd', line 30, column 84 to line 39, column 1)",
  " (in 'bgnbd', line 42, column 4 to column 12)",
  " (in 'bgnbd', line 43, column 4 to column 12)",
  " (in 'bgnbd', line 45, column 4 to column 79)",
  " (in 'bgnbd', line 47, column 4 to column 74)",
  " (in 'bgnbd', line 49, column 4 to column 19)",
  " (in 'bgnbd', line 41, column 81 to line 50, column 1)"};
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>,
                              stan::is_stan_scalar<T5__>>* = nullptr>
stan::promote_args_t<T0__, T1__, T2__, T3__, T4__,
  stan::promote_args_t<T5__>>
loglik_full(const T0__& k, const T1__& t, const T2__& T, const T3__& delta,
            const T4__& lambda, const T5__& p, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__, typename T6__, typename T7__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>,
                              stan::is_stan_scalar<T5__>,
                              stan::is_stan_scalar<T6__>,
                              stan::is_stan_scalar<T7__>>* = nullptr>
stan::promote_args_t<T0__, T1__, T2__, T3__, T4__,
  stan::promote_args_t<T5__, T6__, T7__>>
loglik_marginal(const T0__& k, const T1__& t, const T2__& T, const T3__&
                delta, const T4__& r, const T5__& alpha, const T6__& a,
                const T7__& b, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__, typename T6__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>,
                              stan::is_stan_scalar<T5__>,
                              stan::is_stan_scalar<T6__>>* = nullptr>
stan::promote_args_t<T0__, T1__, T2__, T3__, T4__,
  stan::promote_args_t<T5__, T6__>>
loglik_mlambda(const T0__& k, const T1__& t, const T2__& T, const T3__&
               delta, const T4__& lambda, const T5__& a, const T6__& b,
               std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__, typename T6__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>,
                              stan::is_stan_scalar<T5__>,
                              stan::is_stan_scalar<T6__>>* = nullptr>
stan::promote_args_t<T0__, T1__, T2__, T3__, T4__,
  stan::promote_args_t<T5__, T6__>>
loglik_mprob(const T0__& k, const T1__& t, const T2__& T, const T3__& delta,
             const T4__& r, const T5__& alpha, const T6__& p, std::ostream*
             pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>,
                              stan::is_stan_scalar<T5__>>*>
stan::promote_args_t<T0__, T1__, T2__, T3__, T4__,
  stan::promote_args_t<T5__>>
loglik_full(const T0__& k, const T1__& t, const T2__& T, const T3__& delta,
            const T4__& lambda, const T5__& p, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__, T4__,
                             stan::promote_args_t<T5__>>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    local_scalar_t__ logterm_a = DUMMY_VAR__;
    local_scalar_t__ logterm_b = DUMMY_VAR__;
    local_scalar_t__ term_b_1 = DUMMY_VAR__;
    local_scalar_t__ term_b_2 = DUMMY_VAR__;
    current_statement__ = 81;
    logterm_a = ((stan::math::multiply_log(k, (1 - p)) +
      stan::math::multiply_log(k, lambda)) - (t * lambda));
    current_statement__ = 82;
    term_b_1 = (-lambda * (T - t));
    current_statement__ = 83;
    term_b_2 = stan::math::logit(p);
    current_statement__ = 84;
    logterm_b = ((stan::math::log_sum_exp(term_b_1, term_b_2) * delta) +
      (term_b_1 * (1 - delta)));
    current_statement__ = 85;
    return (logterm_a + logterm_b);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__, typename T6__, typename T7__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>,
                              stan::is_stan_scalar<T5__>,
                              stan::is_stan_scalar<T6__>,
                              stan::is_stan_scalar<T7__>>*>
stan::promote_args_t<T0__, T1__, T2__, T3__, T4__,
  stan::promote_args_t<T5__, T6__, T7__>>
loglik_marginal(const T0__& k, const T1__& t, const T2__& T, const T3__&
                delta, const T4__& r, const T5__& alpha, const T6__& a,
                const T7__& b, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__, T4__,
                             stan::promote_args_t<T5__, T6__, T7__>>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    local_scalar_t__ l1 = DUMMY_VAR__;
    local_scalar_t__ l2 = DUMMY_VAR__;
    current_statement__ = 89;
    l1 = (((stan::math::lgamma((r + k)) - stan::math::lgamma(r)) +
      stan::math::multiply_log(r, alpha)) - stan::math::lbeta(a, b));
    current_statement__ = 90;
    l2 = stan::math::log(((stan::math::beta(a, (b + k)) /
           stan::math::pow((alpha + T), (r + k))) + ((delta *
           stan::math::beta((a + 1), ((b + k) - 1))) /
           stan::math::pow((alpha + t), (r + k)))));
    current_statement__ = 91;
    return (l1 + l2);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__, typename T6__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>,
                              stan::is_stan_scalar<T5__>,
                              stan::is_stan_scalar<T6__>>*>
stan::promote_args_t<T0__, T1__, T2__, T3__, T4__,
  stan::promote_args_t<T5__, T6__>>
loglik_mlambda(const T0__& k, const T1__& t, const T2__& T, const T3__&
               delta, const T4__& lambda, const T5__& a, const T6__& b,
               std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__, T4__,
                             stan::promote_args_t<T5__, T6__>>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    local_scalar_t__ l1 = DUMMY_VAR__;
    local_scalar_t__ l2 = DUMMY_VAR__;
    current_statement__ = 95;
    l1 = (stan::math::multiply_log(k, lambda) - stan::math::lbeta(a, b));
    current_statement__ = 96;
    l2 = stan::math::log(((stan::math::exp((-lambda * T)) *
           stan::math::beta(a, (b + k))) + (delta *
           (stan::math::exp((-lambda * t)) *
           stan::math::beta((a + 1), ((b + k) - 1))))));
    current_statement__ = 97;
    return (l1 + l2);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__, typename T6__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>,
                              stan::is_stan_scalar<T5__>,
                              stan::is_stan_scalar<T6__>>*>
stan::promote_args_t<T0__, T1__, T2__, T3__, T4__,
  stan::promote_args_t<T5__, T6__>>
loglik_mprob(const T0__& k, const T1__& t, const T2__& T, const T3__& delta,
             const T4__& r, const T5__& alpha, const T6__& p, std::ostream*
             pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__, T4__,
                             stan::promote_args_t<T5__, T6__>>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    local_scalar_t__ l1 = DUMMY_VAR__;
    local_scalar_t__ l2 = DUMMY_VAR__;
    current_statement__ = 101;
    l1 = (((stan::math::multiply_log(r, alpha) +
      stan::math::multiply_log(k, (1 - p))) + stan::math::lgamma((r + k))) -
      stan::math::lgamma(r));
    current_statement__ = 102;
    l2 = stan::math::log(((1 / stan::math::pow((alpha + T), (r + k))) +
           ((delta * p) / ((1 - p) * stan::math::pow((alpha + t), (r + k))))));
    current_statement__ = 103;
    return (l1 + l2);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
#include <stan_meta_header.hpp>
class model_bgnbd final : public model_base_crtp<model_bgnbd> {
private:
  int n;
  int reff;
  int approach;
  int gen_loglik;
  Eigen::Matrix<double,-1,1> pars_alpha_data__;
  Eigen::Matrix<double,-1,1> pars_r_data__;
  Eigen::Matrix<double,-1,1> pars_a_data__;
  Eigen::Matrix<double,-1,1> pars_b_data__;
  Eigen::Matrix<double,-1,1> k_data__;
  Eigen::Matrix<double,-1,1> T_data__;
  Eigen::Matrix<double,-1,1> t_data__;
  Eigen::Matrix<double,-1,1> delta_data__;
  int has_lambda;
  int has_prob;
  int lambda_1dim__;
  int p_1dim__;
  int log_lik_1dim__;
  Eigen::Map<Eigen::Matrix<double,-1,1>> pars_alpha{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> pars_r{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> pars_a{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> pars_b{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> k{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> T{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> t{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> delta{nullptr, 0};
public:
  ~model_bgnbd() {}
  model_bgnbd(stan::io::var_context& context__, unsigned int
              random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_bgnbd_namespace::model_bgnbd";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 50;
      context__.validate_dims("data initialization", "n", "int",
        std::vector<size_t>{});
      n = std::numeric_limits<int>::min();
      current_statement__ = 50;
      n = context__.vals_i("n")[(1 - 1)];
      current_statement__ = 50;
      stan::math::check_greater_or_equal(function__, "n", n, 1);
      current_statement__ = 51;
      context__.validate_dims("data initialization", "reff", "int",
        std::vector<size_t>{});
      reff = std::numeric_limits<int>::min();
      current_statement__ = 51;
      reff = context__.vals_i("reff")[(1 - 1)];
      current_statement__ = 52;
      context__.validate_dims("data initialization", "approach", "int",
        std::vector<size_t>{});
      approach = std::numeric_limits<int>::min();
      current_statement__ = 52;
      approach = context__.vals_i("approach")[(1 - 1)];
      current_statement__ = 53;
      context__.validate_dims("data initialization", "gen_loglik", "int",
        std::vector<size_t>{});
      gen_loglik = std::numeric_limits<int>::min();
      current_statement__ = 53;
      gen_loglik = context__.vals_i("gen_loglik")[(1 - 1)];
      current_statement__ = 54;
      context__.validate_dims("data initialization", "pars_alpha", "double",
        std::vector<size_t>{static_cast<size_t>(2)});
      pars_alpha_data__ = Eigen::Matrix<double,-1,1>::Constant(2,
                            std::numeric_limits<double>::quiet_NaN());
      new (&pars_alpha)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(pars_alpha_data__.data(), 2);
      {
        std::vector<local_scalar_t__> pars_alpha_flat__;
        current_statement__ = 54;
        pars_alpha_flat__ = context__.vals_r("pars_alpha");
        current_statement__ = 54;
        pos__ = 1;
        current_statement__ = 54;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 54;
          stan::model::assign(pars_alpha, pars_alpha_flat__[(pos__ - 1)],
            "assigning variable pars_alpha", stan::model::index_uni(sym1__));
          current_statement__ = 54;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 54;
      stan::math::check_greater_or_equal(function__, "pars_alpha",
        pars_alpha, 0);
      current_statement__ = 55;
      context__.validate_dims("data initialization", "pars_r", "double",
        std::vector<size_t>{static_cast<size_t>(2)});
      pars_r_data__ = Eigen::Matrix<double,-1,1>::Constant(2,
                        std::numeric_limits<double>::quiet_NaN());
      new (&pars_r)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(pars_r_data__.data(), 2);
      {
        std::vector<local_scalar_t__> pars_r_flat__;
        current_statement__ = 55;
        pars_r_flat__ = context__.vals_r("pars_r");
        current_statement__ = 55;
        pos__ = 1;
        current_statement__ = 55;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 55;
          stan::model::assign(pars_r, pars_r_flat__[(pos__ - 1)],
            "assigning variable pars_r", stan::model::index_uni(sym1__));
          current_statement__ = 55;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 55;
      stan::math::check_greater_or_equal(function__, "pars_r", pars_r, 0);
      current_statement__ = 56;
      context__.validate_dims("data initialization", "pars_a", "double",
        std::vector<size_t>{static_cast<size_t>(2)});
      pars_a_data__ = Eigen::Matrix<double,-1,1>::Constant(2,
                        std::numeric_limits<double>::quiet_NaN());
      new (&pars_a)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(pars_a_data__.data(), 2);
      {
        std::vector<local_scalar_t__> pars_a_flat__;
        current_statement__ = 56;
        pars_a_flat__ = context__.vals_r("pars_a");
        current_statement__ = 56;
        pos__ = 1;
        current_statement__ = 56;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 56;
          stan::model::assign(pars_a, pars_a_flat__[(pos__ - 1)],
            "assigning variable pars_a", stan::model::index_uni(sym1__));
          current_statement__ = 56;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 56;
      stan::math::check_greater_or_equal(function__, "pars_a", pars_a, 0);
      current_statement__ = 57;
      context__.validate_dims("data initialization", "pars_b", "double",
        std::vector<size_t>{static_cast<size_t>(2)});
      pars_b_data__ = Eigen::Matrix<double,-1,1>::Constant(2,
                        std::numeric_limits<double>::quiet_NaN());
      new (&pars_b)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(pars_b_data__.data(), 2);
      {
        std::vector<local_scalar_t__> pars_b_flat__;
        current_statement__ = 57;
        pars_b_flat__ = context__.vals_r("pars_b");
        current_statement__ = 57;
        pos__ = 1;
        current_statement__ = 57;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 57;
          stan::model::assign(pars_b, pars_b_flat__[(pos__ - 1)],
            "assigning variable pars_b", stan::model::index_uni(sym1__));
          current_statement__ = 57;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 57;
      stan::math::check_greater_or_equal(function__, "pars_b", pars_b, 0);
      current_statement__ = 58;
      stan::math::validate_non_negative_index("k", "n", n);
      current_statement__ = 59;
      context__.validate_dims("data initialization", "k", "double",
        std::vector<size_t>{static_cast<size_t>(n)});
      k_data__ = Eigen::Matrix<double,-1,1>::Constant(n,
                   std::numeric_limits<double>::quiet_NaN());
      new (&k) Eigen::Map<Eigen::Matrix<double,-1,1>>(k_data__.data(), n);
      {
        std::vector<local_scalar_t__> k_flat__;
        current_statement__ = 59;
        k_flat__ = context__.vals_r("k");
        current_statement__ = 59;
        pos__ = 1;
        current_statement__ = 59;
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          current_statement__ = 59;
          stan::model::assign(k, k_flat__[(pos__ - 1)],
            "assigning variable k", stan::model::index_uni(sym1__));
          current_statement__ = 59;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 59;
      stan::math::check_greater_or_equal(function__, "k", k, 0);
      current_statement__ = 60;
      stan::math::validate_non_negative_index("T", "n", n);
      current_statement__ = 61;
      context__.validate_dims("data initialization", "T", "double",
        std::vector<size_t>{static_cast<size_t>(n)});
      T_data__ = Eigen::Matrix<double,-1,1>::Constant(n,
                   std::numeric_limits<double>::quiet_NaN());
      new (&T) Eigen::Map<Eigen::Matrix<double,-1,1>>(T_data__.data(), n);
      {
        std::vector<local_scalar_t__> T_flat__;
        current_statement__ = 61;
        T_flat__ = context__.vals_r("T");
        current_statement__ = 61;
        pos__ = 1;
        current_statement__ = 61;
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          current_statement__ = 61;
          stan::model::assign(T, T_flat__[(pos__ - 1)],
            "assigning variable T", stan::model::index_uni(sym1__));
          current_statement__ = 61;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 61;
      stan::math::check_greater_or_equal(function__, "T", T, 0);
      current_statement__ = 62;
      stan::math::validate_non_negative_index("t", "n", n);
      current_statement__ = 63;
      context__.validate_dims("data initialization", "t", "double",
        std::vector<size_t>{static_cast<size_t>(n)});
      t_data__ = Eigen::Matrix<double,-1,1>::Constant(n,
                   std::numeric_limits<double>::quiet_NaN());
      new (&t) Eigen::Map<Eigen::Matrix<double,-1,1>>(t_data__.data(), n);
      {
        std::vector<local_scalar_t__> t_flat__;
        current_statement__ = 63;
        t_flat__ = context__.vals_r("t");
        current_statement__ = 63;
        pos__ = 1;
        current_statement__ = 63;
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          current_statement__ = 63;
          stan::model::assign(t, t_flat__[(pos__ - 1)],
            "assigning variable t", stan::model::index_uni(sym1__));
          current_statement__ = 63;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 63;
      stan::math::check_greater_or_equal(function__, "t", t, 0);
      current_statement__ = 64;
      stan::math::validate_non_negative_index("delta", "n", n);
      current_statement__ = 65;
      context__.validate_dims("data initialization", "delta", "double",
        std::vector<size_t>{static_cast<size_t>(n)});
      delta_data__ = Eigen::Matrix<double,-1,1>::Constant(n,
                       std::numeric_limits<double>::quiet_NaN());
      new (&delta)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(delta_data__.data(), n);
      {
        std::vector<local_scalar_t__> delta_flat__;
        current_statement__ = 65;
        delta_flat__ = context__.vals_r("delta");
        current_statement__ = 65;
        pos__ = 1;
        current_statement__ = 65;
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          current_statement__ = 65;
          stan::model::assign(delta, delta_flat__[(pos__ - 1)],
            "assigning variable delta", stan::model::index_uni(sym1__));
          current_statement__ = 65;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 65;
      stan::math::check_greater_or_equal(function__, "delta", delta, 0);
      current_statement__ = 66;
      has_lambda = std::numeric_limits<int>::min();
      current_statement__ = 66;
      has_lambda = 0;
      current_statement__ = 67;
      has_prob = std::numeric_limits<int>::min();
      current_statement__ = 67;
      has_prob = 0;
      current_statement__ = 70;
      if ((stan::math::primitive_value(stan::math::logical_eq(reff, 1)) ||
          stan::math::primitive_value(stan::math::logical_eq(reff, 2)))) {
        current_statement__ = 68;
        has_lambda = 1;
      }
      current_statement__ = 73;
      if ((stan::math::primitive_value(stan::math::logical_eq(reff, 1)) ||
          stan::math::primitive_value(stan::math::logical_eq(reff, 3)))) {
        current_statement__ = 71;
        has_prob = 1;
      }
      current_statement__ = 74;
      lambda_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 74;
      lambda_1dim__ = (stan::math::logical_eq(has_lambda, 0) ? 0 : n);
      current_statement__ = 74;
      stan::math::validate_non_negative_index("lambda",
        "has_lambda == 0 ? 0 : n", lambda_1dim__);
      current_statement__ = 75;
      p_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 75;
      p_1dim__ = (stan::math::logical_eq(has_prob, 0) ? 0 : n);
      current_statement__ = 75;
      stan::math::validate_non_negative_index("p", "has_prob == 0 ? 0 : n",
        p_1dim__);
      current_statement__ = 76;
      log_lik_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 76;
      log_lik_1dim__ = (stan::math::logical_eq(gen_loglik, 0) ? 0 : n);
      current_statement__ = 76;
      stan::math::validate_non_negative_index("log_lik",
        "gen_loglik == 0 ? 0 : n", log_lik_1dim__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + 1 + 1 + lambda_1dim__ + p_1dim__;
  }
  inline std::string model_name() const final {
    return "model_bgnbd";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_bgnbd_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      local_scalar_t__ r = DUMMY_VAR__;
      current_statement__ = 1;
      r = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
            lp__);
      local_scalar_t__ alpha = DUMMY_VAR__;
      current_statement__ = 2;
      alpha = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      local_scalar_t__ a = DUMMY_VAR__;
      current_statement__ = 3;
      a = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
            lp__);
      local_scalar_t__ b = DUMMY_VAR__;
      current_statement__ = 4;
      b = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
            lp__);
      Eigen::Matrix<local_scalar_t__,-1,1> lambda =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(lambda_1dim__,
          DUMMY_VAR__);
      current_statement__ = 5;
      lambda = in__.template read_constrain_lb<
                 Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
                 lambda_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> p =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p_1dim__, DUMMY_VAR__);
      current_statement__ = 6;
      p = in__.template read_constrain_lub<
            Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, 1, lp__,
            p_1dim__);
      {
        current_statement__ = 29;
        if ((stan::math::primitive_value(stan::math::logical_neq(reff, 4)) ||
            stan::math::primitive_value(stan::math::logical_neq(approach, 0)))) {
          current_statement__ = 24;
          lp_accum__.add(stan::math::gamma_lpdf<propto__>(r,
                           stan::model::rvalue(pars_r, "pars_r",
                             stan::model::index_uni(1)),
                           stan::model::rvalue(pars_r, "pars_r",
                             stan::model::index_uni(2))));
          current_statement__ = 25;
          lp_accum__.add(stan::math::gamma_lpdf<propto__>(alpha,
                           stan::model::rvalue(pars_alpha, "pars_alpha",
                             stan::model::index_uni(1)),
                           stan::model::rvalue(pars_alpha, "pars_alpha",
                             stan::model::index_uni(2))));
          current_statement__ = 26;
          lp_accum__.add(stan::math::gamma_lpdf<propto__>(a,
                           stan::model::rvalue(pars_a, "pars_a",
                             stan::model::index_uni(1)),
                           stan::model::rvalue(pars_a, "pars_a",
                             stan::model::index_uni(2))));
          current_statement__ = 27;
          lp_accum__.add(stan::math::gamma_lpdf<propto__>(b,
                           stan::model::rvalue(pars_b, "pars_b",
                             stan::model::index_uni(1)),
                           stan::model::rvalue(pars_b, "pars_b",
                             stan::model::index_uni(2))));
        }
        current_statement__ = 32;
        if (has_lambda) {
          current_statement__ = 30;
          lp_accum__.add(stan::math::gamma_lpdf<propto__>(lambda, r, alpha));
        }
        current_statement__ = 35;
        if (has_prob) {
          current_statement__ = 33;
          lp_accum__.add(stan::math::beta_lpdf<propto__>(p, a, b));
        }
        current_statement__ = 49;
        for (int i = 1; i <= n; ++i) {
          current_statement__ = 47;
          if (stan::math::logical_eq(reff, 1)) {
            current_statement__ = 45;
            lp_accum__.add(loglik_full(
                             stan::model::rvalue(k, "k",
                               stan::model::index_uni(i)),
                             stan::model::rvalue(t, "t",
                               stan::model::index_uni(i)),
                             stan::model::rvalue(T, "T",
                               stan::model::index_uni(i)),
                             stan::model::rvalue(delta, "delta",
                               stan::model::index_uni(i)),
                             stan::model::rvalue(lambda, "lambda",
                               stan::model::index_uni(i)),
                             stan::model::rvalue(p, "p",
                               stan::model::index_uni(i)), pstream__));
          } else {
            current_statement__ = 44;
            if (stan::math::logical_eq(reff, 2)) {
              current_statement__ = 42;
              lp_accum__.add(loglik_mlambda(
                               stan::model::rvalue(k, "k",
                                 stan::model::index_uni(i)),
                               stan::model::rvalue(t, "t",
                                 stan::model::index_uni(i)),
                               stan::model::rvalue(T, "T",
                                 stan::model::index_uni(i)),
                               stan::model::rvalue(delta, "delta",
                                 stan::model::index_uni(i)),
                               stan::model::rvalue(lambda, "lambda",
                                 stan::model::index_uni(i)), a, b, pstream__));
            } else {
              current_statement__ = 41;
              if (stan::math::logical_eq(reff, 3)) {
                current_statement__ = 39;
                lp_accum__.add(loglik_mprob(
                                 stan::model::rvalue(k, "k",
                                   stan::model::index_uni(i)),
                                 stan::model::rvalue(t, "t",
                                   stan::model::index_uni(i)),
                                 stan::model::rvalue(T, "T",
                                   stan::model::index_uni(i)),
                                 stan::model::rvalue(delta, "delta",
                                   stan::model::index_uni(i)), r, alpha,
                                 stan::model::rvalue(p, "p",
                                   stan::model::index_uni(i)), pstream__));
              } else {
                current_statement__ = 38;
                if (stan::math::logical_eq(reff, 4)) {
                  current_statement__ = 36;
                  lp_accum__.add(loglik_marginal(
                                   stan::model::rvalue(k, "k",
                                     stan::model::index_uni(i)),
                                   stan::model::rvalue(t, "t",
                                     stan::model::index_uni(i)),
                                   stan::model::rvalue(T, "T",
                                     stan::model::index_uni(i)),
                                   stan::model::rvalue(delta, "delta",
                                     stan::model::index_uni(i)), r, alpha, a,
                                   b, pstream__));
                }
              }
            }
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_bgnbd_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      double r = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      r = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
            lp__);
      double alpha = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      alpha = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      double a = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      a = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
            lp__);
      double b = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      b = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
            lp__);
      Eigen::Matrix<double,-1,1> lambda =
        Eigen::Matrix<double,-1,1>::Constant(lambda_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 5;
      lambda = in__.template read_constrain_lb<
                 Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
                 lambda_1dim__);
      Eigen::Matrix<double,-1,1> p =
        Eigen::Matrix<double,-1,1>::Constant(p_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 6;
      p = in__.template read_constrain_lub<
            Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, 1, lp__,
            p_1dim__);
      out__.write(r);
      out__.write(alpha);
      out__.write(a);
      out__.write(b);
      out__.write(lambda);
      out__.write(p);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      Eigen::Matrix<double,-1,1> log_lik =
        Eigen::Matrix<double,-1,1>::Constant(log_lik_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 23;
      if (stan::math::logical_eq(gen_loglik, 1)) {
        current_statement__ = 21;
        for (int i = 1; i <= n; ++i) {
          current_statement__ = 19;
          if (stan::math::logical_eq(reff, 1)) {
            current_statement__ = 17;
            stan::model::assign(log_lik,
              loglik_full(
                stan::model::rvalue(k, "k", stan::model::index_uni(i)),
                stan::model::rvalue(t, "t", stan::model::index_uni(i)),
                stan::model::rvalue(T, "T", stan::model::index_uni(i)),
                stan::model::rvalue(delta, "delta", stan::model::index_uni(i)),
                stan::model::rvalue(lambda, "lambda",
                  stan::model::index_uni(i)),
                stan::model::rvalue(p, "p", stan::model::index_uni(i)),
                pstream__), "assigning variable log_lik",
              stan::model::index_uni(i));
          } else {
            current_statement__ = 16;
            if (stan::math::logical_eq(reff, 2)) {
              current_statement__ = 14;
              stan::model::assign(log_lik,
                loglik_mlambda(
                  stan::model::rvalue(k, "k", stan::model::index_uni(i)),
                  stan::model::rvalue(t, "t", stan::model::index_uni(i)),
                  stan::model::rvalue(T, "T", stan::model::index_uni(i)),
                  stan::model::rvalue(delta, "delta",
                    stan::model::index_uni(i)),
                  stan::model::rvalue(lambda, "lambda",
                    stan::model::index_uni(i)), a, b, pstream__),
                "assigning variable log_lik", stan::model::index_uni(i));
            } else {
              current_statement__ = 13;
              if (stan::math::logical_eq(reff, 3)) {
                current_statement__ = 11;
                stan::model::assign(log_lik,
                  loglik_mprob(
                    stan::model::rvalue(k, "k", stan::model::index_uni(i)),
                    stan::model::rvalue(t, "t", stan::model::index_uni(i)),
                    stan::model::rvalue(T, "T", stan::model::index_uni(i)),
                    stan::model::rvalue(delta, "delta",
                      stan::model::index_uni(i)), r, alpha,
                    stan::model::rvalue(p, "p", stan::model::index_uni(i)),
                    pstream__), "assigning variable log_lik",
                  stan::model::index_uni(i));
              } else {
                current_statement__ = 10;
                if (stan::math::logical_eq(reff, 4)) {
                  current_statement__ = 8;
                  stan::model::assign(log_lik,
                    loglik_marginal(
                      stan::model::rvalue(k, "k", stan::model::index_uni(i)),
                      stan::model::rvalue(t, "t", stan::model::index_uni(i)),
                      stan::model::rvalue(T, "T", stan::model::index_uni(i)),
                      stan::model::rvalue(delta, "delta",
                        stan::model::index_uni(i)), r, alpha, a, b, pstream__),
                    "assigning variable log_lik", stan::model::index_uni(i));
                }
              }
            }
          }
        }
      }
      out__.write(log_lik);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ r = DUMMY_VAR__;
      current_statement__ = 1;
      r = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, r);
      local_scalar_t__ alpha = DUMMY_VAR__;
      current_statement__ = 2;
      alpha = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, alpha);
      local_scalar_t__ a = DUMMY_VAR__;
      current_statement__ = 3;
      a = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, a);
      local_scalar_t__ b = DUMMY_VAR__;
      current_statement__ = 4;
      b = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, b);
      Eigen::Matrix<local_scalar_t__,-1,1> lambda =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(lambda_1dim__,
          DUMMY_VAR__);
      current_statement__ = 5;
      stan::model::assign(lambda,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(lambda_1dim__),
        "assigning variable lambda");
      out__.write_free_lb(0, lambda);
      Eigen::Matrix<local_scalar_t__,-1,1> p =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p_1dim__, DUMMY_VAR__);
      current_statement__ = 6;
      stan::model::assign(p,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(p_1dim__),
        "assigning variable p");
      out__.write_free_lub(0, 1, p);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "r", "double",
        std::vector<size_t>{});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "alpha", "double",
        std::vector<size_t>{});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "a", "double",
        std::vector<size_t>{});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "b", "double",
        std::vector<size_t>{});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "lambda", "double",
        std::vector<size_t>{static_cast<size_t>(lambda_1dim__)});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "p", "double",
        std::vector<size_t>{static_cast<size_t>(p_1dim__)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ r = DUMMY_VAR__;
      current_statement__ = 1;
      r = context__.vals_r("r")[(1 - 1)];
      out__.write_free_lb(0, r);
      local_scalar_t__ alpha = DUMMY_VAR__;
      current_statement__ = 2;
      alpha = context__.vals_r("alpha")[(1 - 1)];
      out__.write_free_lb(0, alpha);
      local_scalar_t__ a = DUMMY_VAR__;
      current_statement__ = 3;
      a = context__.vals_r("a")[(1 - 1)];
      out__.write_free_lb(0, a);
      local_scalar_t__ b = DUMMY_VAR__;
      current_statement__ = 4;
      b = context__.vals_r("b")[(1 - 1)];
      out__.write_free_lb(0, b);
      Eigen::Matrix<local_scalar_t__,-1,1> lambda =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(lambda_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> lambda_flat__;
        current_statement__ = 5;
        lambda_flat__ = context__.vals_r("lambda");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= lambda_1dim__; ++sym1__) {
          current_statement__ = 5;
          stan::model::assign(lambda, lambda_flat__[(pos__ - 1)],
            "assigning variable lambda", stan::model::index_uni(sym1__));
          current_statement__ = 5;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, lambda);
      Eigen::Matrix<local_scalar_t__,-1,1> p =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p_1dim__, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> p_flat__;
        current_statement__ = 6;
        p_flat__ = context__.vals_r("p");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= p_1dim__; ++sym1__) {
          current_statement__ = 6;
          stan::model::assign(p, p_flat__[(pos__ - 1)],
            "assigning variable p", stan::model::index_uni(sym1__));
          current_statement__ = 6;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lub(0, 1, p);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"r", "alpha", "a", "b", "lambda", "p"};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      std::vector<std::string> temp{"log_lik"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(lambda_1dim__)},
                std::vector<size_t>{static_cast<size_t>(p_1dim__)}};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(log_lik_1dim__)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "r");
    param_names__.emplace_back(std::string() + "alpha");
    param_names__.emplace_back(std::string() + "a");
    param_names__.emplace_back(std::string() + "b");
    for (int sym1__ = 1; sym1__ <= lambda_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "lambda" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= p_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "p" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= log_lik_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "r");
    param_names__.emplace_back(std::string() + "alpha");
    param_names__.emplace_back(std::string() + "a");
    param_names__.emplace_back(std::string() + "b");
    for (int sym1__ = 1; sym1__ <= lambda_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "lambda" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= p_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "p" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= log_lik_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"r\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"a\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"lambda\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(lambda_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"p\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(p_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(log_lik_1dim__) + "},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"r\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"a\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"lambda\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(lambda_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"p\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(p_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(log_lik_1dim__) + "},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((1 + 1) + 1) + 1) + lambda_1dim__) +
      p_1dim__);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities *
      (log_lik_1dim__);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((1 + 1) + 1) + 1) + lambda_1dim__) +
      p_1dim__);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities *
      (log_lik_1dim__);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_bgnbd_namespace::model_bgnbd;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_bgnbd_namespace::profiles__;
}
#endif
#endif
